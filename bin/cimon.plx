#!/usr/bin/perl
# Author: Aleksandar Zhelyazkov
use strict;
use warnings;
use Carp;
use RRDs; # available with rrdtool, type 'make site-perl-install'
use Net::SNMP; #available at CPAN
use Net::Netmask; #also at CPAN
use vars qw($session $error $response);
use Sys::Syslog qw(:DEFAULT setlogsock); # log to syslog
use Time::localtime qw (:FIELDS);
use Getopt::Std;#options from commandline
use File::Basename;

my ($name,$path) = fileparse($0);#get PWD
my %general; # general options
my %routers; # routers + communityes
my $graphdir; # directory for graphics
my $logdir = '/var/sasacct'; # directory for rrd files
my ($community,$rwcommunity,$hostname);
my $configfile; #won't work if you doesn't have one
my %accounting; #hash for accounting info
my $graph = 1; #graphics by default
my $utc = time(); #cache the unix timestamp at start
my $now = localtime();
my $system_time = sprintf("%04d%02d%02d% 02d%02d%02d",$tm_year+1900,$tm_mon+1,$tm_mday,$tm_hour,$tm_min,$tm_sec);
my $bits = 1; # 1 - Bits per Second, 0 - Bytes per Second, Defaults to Bytes
my $localedir; # directory with language translation
my $lang; #language

#########################################
#default locale
my %locale = (
	'day'     => 'Daily',
	'week'    => 'Weekly',
	'month'   => 'Montly',
	'year'    => 'Yearly',
	'vertical-label-bits'     => 'Bits per second',
	'vertical-label-bytes'    => 'Bytes per second',
	'in'      => 'In',
	'average' => 'Avg',
	'min'     => 'Min',
	'max'     => 'Max',
	'out'     => 'Out',
	'current' => 'Current',
	'comment' => 'Generated by sasacct http\://rousse.pm.org/sasacct',
	'title'   => 'Traffic Stats'
);

#################################
#get language from ENV

if (!exists($ENV{'LANG'})) {
        $lang = 'C';
}else {
        $lang = $ENV{'LANG'};
}

my %opts;
&getopts('hvrc:',\%opts);

#do we need to make graphs?
#or let sasacct do that
if ($opts{r}){
	$graph = 0;
}

###############################
#whereis the conf
if ($opts{c}){
	$configfile = $opts{c};
}elsif(stat("$path"."../etc/cimon.conf")){
	$configfile = "$path"."../etc/cimon.conf";
}elsif(stat("/etc/cimon.conf")) {
	$configfile = "/etc/cimon.conf";
}else {
	croak("Supply configfile with -c");
}

######################
#Oooh  you need help?
if ($opts{h}) {
	&help;
}

#####################
#who needs this?
if ($opts{v}){
	&ver;
}

######################
#syslog logging
setlogsock('unix');
openlog('cimon', 'cons,pid,nowait', 'user');

&parse_config($configfile);

if (defined($localedir) &&  stat("$localedir"."$lang")){
        open(my $LANG,"<",$localedir"."$lang") or carp($!);
        my ($descr,$value);
        while(<$LANG>) {
                next if $_ =~ /^#/g;
                next if $_ =~ /^\s+/g;
                chomp $_;
                ($descr,$value)=split(/=/,$_);
                $locale{$descr} = $value;
        }
}

#################################
#some directory checking
if (!opendir(DIR,$graphdir)){
	syslog('warning',"WARNING graphdir options not found");
	croak("Supply a directory where graphics will be located");
}
if (!opendir(DIR,$logdir)){
	mkdir("/var/cimon",0755) && syslog('info',"/var/cimon created") ||
	croak("Neither logdir found nor /var/cimon created.Maybe su root?"); 
}


#########################
#		main			#
#########################


#############################################
#getting information for cpu and memory
#disabled for use with sasacct.if you need it
#uncomment &get_info
foreach(keys %routers) {
	#&get_info($_,$routers{$_}->{'community'});
	&get_accounting($_,$routers{$_}->{rwcommunity}) if ($routers{$_}->{networks});
	&graph($_,'info');
}

closelog();#end syslog

##########################
#		functions		 #
##########################

sub parse_config {
	my ($configfile) = @_;
	open (CONF,"$configfile") || 
		croak("Cannot open $configfile:$!");
	while(<CONF>){
    s/^#\w+|\s//g; #remove comments
    s/^\s+|\s+$//g;
    #parse section general
    if(/general\{|^\{/ .. /\}|\}$/){
        s/\}$//g;
        if (/^graphdir/){
            s/graphdir\=//g;
            s/\/$//g;
            $_ =  $_."\/";
            $graphdir = $_;
        }
        if ($_ =~ /^logdir/){
            s/logdir\=//g;
            s/\/$//g;
            $_ = $_."/";
            $logdir = $_;
            }
        if ($_ =~ /^localedir/){
            s/localedir\=//g;
            s/\/$//g;
            $_ = $_."/";
            $localedir = $_;
        }
        if ($_ = /^language/){
            s/language\=//g;
            s/\/$//g;
            $lang = $_;
            }
        }
	  #parse router
	  #TODO: rwcommunity doesn't get
	  #	 parsed if listed before the community
        if(/router\{|^\{/ .. /\}|\}$/){
            s/\}$//g;
            if (/^hostname/g){
                (my $junk,$hostname) = split(/=/,$_);
            } elsif (/^community/g){
                (my $junk,$community) = split(/=/,$_);
                $routers{$hostname}->{'community'} = $community;
            } elsif (/^rwcommunity/g) {
                (my $junk,$rwcommunity) = split(/=/,$_);
                $routers{$hostname}->{'rwcommunity'}= $rwcommunity;
            } elsif (/^network\=/g){
                (my $j,my $i)= split(/=/,$_);
                my @hosts = split(/\,/,$i);
                $routers{$hostname}->{'networks'}=\@hosts;
            }
        }
    }
    close CONF;
}

###########################################################
#Creates the RRD files
#Arguments:
#$fname - ip address in doted format
#$type  - info for  cpu/memory
#	- accounting for ip accounting 
#Produces:
# aaa.bbb.ccc.ddd-info.rrd - memory/cpu
# 			where aaa.bbb.ccc.ddd 
#			is ip address of the router
# aaa.bbb.ccc.ddd.rrd - where aaa.bbb.ccc.ddd is
# 			ip address of accounted network
sub create_file {
    my($fname,$type) = @_;
    if(stat("$logdir"."$fname".".rrd")){
	    syslog('warning',"WARNING:filename $fname exists");
	} else {
	if ($type =~ /info/){
     RRDs::create (
	    "$logdir"."$fname"."-info.rrd",
        "DS:memused:GAUGE:600:U:U",
	    "DS:memusedfast:GAUGE:600:U:U",
    	"DS:memfree:GAUGE:600:U:U",
    	"DS:memfreefast:GAUGE:600:U:U",
    	"DS:cpufive:GAUGE:600:U:U",
        "RRA:AVERAGE:0.5:1:600",
        "RRA:AVERAGE:0.5:6:700",
        "RRA:AVERAGE:0.5:24:775",
        "RRA:AVERAGE:0.5:288:797",
        "RRA:MAX:0.5:1:600",
        "RRA:MAX:0.5:6:700",
        "RRA:MAX:0.5:24:775",
        "RRA:MAX:0.5:288:797",
        "RRA:MIN:0.5:1:600",
        "RRA:MIN:0.5:6:700",
        "RRA:MIN:0.5:24:775",
        "RRA:MIN:0.5:288:797",
        "RRA:LAST:0.5:1:600",
        "RRA:LAST:0.5:6:700",
        "RRA:LAST:0.5:24:775",
        "RRA:LAST:0.5:288:797"
    );
	my $ERROR = RRDs::error;
        syslog('warning',"WARNING::$ERROR") if ($ERROR);
	}
	if ($type =~/accounting/){
	RRDs::create (
        "$logdir"."$fname".".rrd",
        "DS:in:ABSOLUTE:600:U:U",
        "DS:out:ABSOLUTE:600:U:U",
        "RRA:AVERAGE:0.5:1:600",
        "RRA:AVERAGE:0.5:6:700",
        "RRA:AVERAGE:0.5:24:775",
        "RRA:AVERAGE:0.5:288:797",
        "RRA:MAX:0.5:1:600",
        "RRA:MAX:0.5:6:700",
        "RRA:MAX:0.5:24:775",
        "RRA:MAX:0.5:288:797",
        "RRA:MIN:0.5:1:600",
        "RRA:MIN:0.5:6:700",
        "RRA:MIN:0.5:24:775",
        "RRA:MIN:0.5:288:797",
        "RRA:LAST:0.5:1:600",
        "RRA:LAST:0.5:6:700",
        "RRA:LAST:0.5:24:775",
        "RRA:LAST:0.5:288:797"
        );
	    my $ERROR = RRDs::error;
        syslog('warning',"WARNING::$ERROR") if ($ERROR);
	}
	}
}

####################################################
# SNMP section
# .1.3.6.1.4.1.9.9.48.1.1.1.5 - ciscoMemoryPoolUsed
# .1.3.6.1.4.1.9.9.48.1.1.1.6 - ciscoMemoryPoolFree
# .1.3.6.1.4.1.9.2.1.58 - AvgBusy5 
#
# Collect the information needed via snmp
# and update the rrd files
sub get_info {
	my ($hostname,$community) = @_;
	($session, $error) = Net::SNMP->session(
        -hostname  => shift || $hostname,
        -community => shift || $community,
        -port      => shift || 161
    );
    if (!defined($session)) {
        syslog('warning',"ERROR::%s.\n", $error);
	}
	my ($memused_ptr,$memfree_ptr,$cpuutil_ptr,@a);
	if (!defined($memused_ptr = $session->get_table('.1.3.6.1.4.1.9.9.48.1.1.1.5'))){
        syslog('warning',"ERROR::%s",$session->error());
        $session->close();
	}
	if (!defined($memfree_ptr = $session->get_table('.1.3.6.1.4.1.9.9.48.1.1.1.6'))){
        syslog('warning',"ERROR::%s",$session->error());
        $session->close();
    }
	if (!defined($cpuutil_ptr = $session->get_table('.1.3.6.1.4.1.9.2.1.58'))){
        syslog('warning',"ERROR::%s",$session->error());
        $session->close();
    }
	for(values %$memused_ptr){ push @a,$_;}
	for(values %$memfree_ptr){ push @a,$_;}
	for(values %$cpuutil_ptr){ push @a,$_;}
	for(my $i=0;$i<5;$i++) { $a[$i]=0 if !defined($a[$i]);}
	if (!stat("$logdir"."$hostname"."-info.rrd")){
	    create_file($hostname,'info');
        RRDs::update("$logdir"."$hostname"."-info.rrd","$utc:$a[0]:$a[1]:$a[2]:$a[3]:$a[4]");
    } else {
        RRDs::update("$logdir"."$hostname"."-info.rrd","$utc:$a[0]:$a[1]:$a[2]:$a[3]:$a[4]");
	}
}

###################
# Generate graphics
sub graph {
	my($router,$type)=@_;
	my %t = (day => 86000,week => 604800, month => 2600640, year => 31557600);
	my %d = (day => $locale{'day'},week => $locale{'week'},month => $locale{'month'},year => $locale{'year'});
	my $date = ctime(time());
	if ($type =~ 'info') {
	 for (keys %t) {
	  my $rrdsource = "$logdir"."$router"."-info.rrd";
	  my $target = "$graphdir"."$router";
     
      RRDs::graph ("$target-memory-$_.gif",
         "--title","$router Memory Usage $d{$_}",
         "--start","-$t{$_}","-l","0",
         "--vertical-label","Memory Used in Bytes",
         "DEF:memused=$rrdsource:memused:AVERAGE",
         "AREA:memused#333333:Used",
         "GPRINT:memused:AVERAGE:Avg\\:%8.2lf%s",
         "GPRINT:memused:MIN:Min\\:%8.2lf%s",
         "GPRINT:memused:MAX:Max\\:%8.2lf%s",
         "GPRINT:memused:LAST:Current\\:%8.2lf%s\\n",
	     "DEF:memfree=$rrdsource:memfree:AVERAGE",
         "STACK:memfree#CCCCCC:Free",
         "GPRINT:memfree:AVERAGE:Avg\\:%8.2lf%s",
         "GPRINT:memfree:MIN:Min\\:%8.2lf%s",
         "GPRINT:memfree:MAX:Max\\:%8.2lf%s",
         "GPRINT:memfree:LAST:Current\\:%8.2lf%s\\n",
         "COMMENT:Generated by cimon http://rousse.pm.org/cimon\\c",
         "COMMENT:$date\\c"
         );
      if (my $ERROR = RRDs::error) {
        syslog('warning',"ERROR::$ERROR");
      }
      RRDs::graph ("$target-cpu-$_.gif",
         "--title","$router CPU Utilization $d{$_}",
         "--start","-$t{$_}","-l","0",
         "--vertical-label","Percents","-u","100",
         "DEF:cpu=$rrdsource:cpufive:AVERAGE",
         "AREA:cpu#00CC00:CPU Utilization",
         "GPRINT:cpu:AVERAGE:Avg\\:%2.0lf%s",
         "GPRINT:cpu:MIN:Min\\:%2.0lf%s",
         "GPRINT:cpu:MAX:Max\\:%2.0lf%s",
         "GPRINT:cpu:LAST:Current\\:%2.0lf%s\\n",
         "COMMENT:Generated by cimon http://rousse.pm.org/cimon\\c",
         "COMMENT:$date\\c"
      );
      if (my $ERROR = RRDs::error) {
        syslog('warning',"ERROR::$ERROR");
      }
     }
    }
	 if ($type =~ /accounting/) {
        my $rrdsource = "$logdir"."$router".".rrd";
        my $target = "$graphdir"."$router";
     my (@header_str,@def_str,@data_str,@comment_str);
     if ($bits == 1){
     @def_str = ( "DEF:indatabits=$rrdsource:in:AVERAGE",
                "DEF:outdatabits=$rrdsource:out:AVERAGE",
                "CDEF:indata=indatabits,8,*",
                "CDEF:outdata=outdatabits,8,*",
                "CDEF:averagein=indata,UN,0,indata,IF",
                "CDEF:averageout=outdata,UN,0,outdata,IF"
     );
     push @header_str,("--vertical-label","$locale{'vertical-label-bits'}","--base","1000");
    } else {
        @def_str =("DEF:indata=$rrdsource:in:AVERAGE",
            "DEF:outdata=$rrdsource:out:AVERAGE",
			"CDEF:indata=indatabytes",
	        "CDEF:outdata=outdatabytes",
            "CDEF:averagein=indatabytes,UN,0,indatabytes,IF",
            "CDEF:averageout=outdatabytes,UN,0,outdatabytes,IF",
        );
        push @header_str,("--vertical-label","$locale{'vertical-label-bytes'}");
    }
	@data_str = ("AREA:averagein#00CC00:$locale{'in'}",
        "GPRINT:averagein:AVERAGE:$locale{'average'}\\:%8.2lf%s",
        "GPRINT:indata:MIN:$locale{'min'}\\:%8.2lf%s",
        "GPRINT:indata:MAX:$locale{'max'}\\:%8.2lf%s",
        "GPRINT:indata:LAST:$locale{'current'}\\:%8.2lf%s\\n",
        "LINE1:averageout#0000FF:$locale{'out'}",
        "GPRINT:averageout:AVERAGE:$locale{'average'}\\:%8.2lf%s",
        "GPRINT:outdata:MIN:$locale{'min'}\\:%8.2lf%s",
        "GPRINT:outdata:MAX:$locale{'max'}\\:%8.2lf%s",
        "GPRINT:outdata:LAST:$locale{'current'}\\:%8.2lf%s\\n"
        );
        @comment_str = ("COMMENT:$locale{'comment'}\\c",
                        "COMMENT:$date\\c"
        );
         for (keys %t) {
          push @header_str,("--title","$router $d{$_} $locale{'title'}",
            "--start","-$t{$_}",
            "-l","0",
            "--color","FRAME#FFFFFF",
            "--color","SHADEA#FFFFFF",
            "--color","SHADEB#FFFFFF",
            "--color","BACK#FFFFFF",
	      );
          RRDs::graph
          ("$target-$_.gif",@header_str,@def_str,@data_str,@comment_str);
          if (my $ERROR = RRDs::error) {
            syslog('warning',"ERROR:$ERROR\n");
          }
        }
	}
}

#############################
# Actual Work for accounting
sub get_accounting {
	my($router,$community) = @_;
	my (%accounting,$base,$block,$host);
	my $table = {};
	my ($session,$error) = Net::SNMP->session (
        -hostname => $router,
        -community => $community
	);
	if (!defined($session)) {
		syslog('warning',"get_accounting:$router - $error");
		return;
	}
	for(@{$routers{$router}->{'networks'}}) {
		$base = Net::Netmask->new2($_);
		$base->storeNetblock($table);
	}
	#for complete information about getting cisco ip accounting stats
	#check http://www.cisco.com/warp/public/477/SNMP/mac_ip_snmp.shtml

	my $actCheckPoint = '.1.3.6.1.4.1.9.2.4.11.0'; 
	my $lipCkAccountingTable = '.1.3.6.1.4.1.9.2.4.9.1.4';
	my $checkpointnew;
	if (!defined($checkpointnew = $session->get_request($actCheckPoint))) {
        syslog('warning',"$router - no checkpoint returned");
        return;
    }
	my $newcheckpoint = $checkpointnew->{$actCheckPoint};
	if (!defined($response = $session->set_request($actCheckPoint,INTEGER,$newcheckpoint))) { 
		syslog('warning',"$router - error incrementing checkpoint"); 
		return;
	}
	my $acctable_ptr;
	if (!defined($acctable_ptr = $session->get_table($lipCkAccountingTable))) {
		syslog('warning',"No accounting returned while walking trough $router");
		return;
	}
	for(keys (%$acctable_ptr)) {
        if ($_ =~ /^(\.\d){12}\.(\d+\.\d+\.\d+\.\d+)\.(\d+\.\d+\.\d+\.\d+)/g) {
		    my($src,$dst) = ($2,$3);
		    $block = findNetblock($src,$table);
		    if($block) {
			    $host = $block->base();
			    $accounting{$host}->[1] += $acctable_ptr->{$_};
		    }
		    $block = findNetblock($dst,$table);
		    if($block) {
			    $host = $block->base();
			    $accounting{$host}->[0] += $acctable_ptr->{$_};
		    }
        }
	} #end for

	#TODO: must rewrite this it looks stupid
	#	and as many stupid things it works fine
	my $update = 0;
	for(keys %accounting) {
		if (!defined($accounting{$_}->[0])) {
			$accounting{$_}->[0] = 0;
			$update +=1;
		}
		if (!defined($accounting{$_}->[1])) {
			$accounting{$_}->[1] = 0;
			$update +=1;
		}

		#create the rrd file if doesn't exist
		if (!stat("$logdir"."$_".".rrd")){
                create_file($_,'accounting');
                RRDs::update("$logdir"."$_".".rrd","$utc:$accounting{$_}->[0]:$accounting{$_}->[1]");
        } else {
            if ($update != 2){
		        open(my $LOG,"+>>",$logdir"."$_") || syslog('warning',"Cannot open: $!");
		        print $LOG ("$system_time\t$_\t$accounting{$_}->[0]\t$accounting{$_}->[1]\n");
		        close $LOG;
        }
            RRDs::update("$logdir"."$_".".rrd","$utc:$accounting{$_}->[0]:$accounting{$_}->[1]");
		    &graph($_,'accounting') if ($graph == 1);
        }
    }#end for
}

sub help {
print "Usage: $0 [-crhv] [args]\n";
print "  -c\tspecify configfile from commandline\n";
print "  -r\tlog to rrd and logfile but do not produce accounting graphics\n";
print "  -h\tprint this help and exit\n";
print "  -v\tprint version number\n";
exit;
}

sub ver {
    print "cimon (sasacct 1.0.3) 0.5\n\n";
    print "Written by Aleksandar Zhelyazkov\n";
    print "Copyright (C) 2003\n";
    print "This is free software; see the source for copying conditions. There is NO\n";
    print "warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n";
    exit;
}
